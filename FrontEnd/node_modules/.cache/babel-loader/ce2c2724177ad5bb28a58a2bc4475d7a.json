{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = isMACAddress;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar macAddress = /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/;\nvar macAddressNoColons = /^([0-9a-fA-F]){12}$/;\nvar macAddressWithHyphen = /^([0-9a-fA-F][0-9a-fA-F]-){5}([0-9a-fA-F][0-9a-fA-F])$/;\nvar macAddressWithSpaces = /^([0-9a-fA-F][0-9a-fA-F]\\s){5}([0-9a-fA-F][0-9a-fA-F])$/;\nvar macAddressWithDots = /^([0-9a-fA-F]{4}).([0-9a-fA-F]{4}).([0-9a-fA-F]{4})$/;\n\nfunction isMACAddress(str, options) {\n  (0, _assertString[\"default\"])(str);\n\n  if (options && options.no_colons) {\n    return macAddressNoColons.test(str);\n  }\n\n  return macAddress.test(str) || macAddressWithHyphen.test(str) || macAddressWithSpaces.test(str) || macAddressWithDots.test(str);\n}\n\nmodule.exports = exports[\"default\"];\nmodule.exports[\"default\"] = exports[\"default\"];","map":{"version":3,"sources":["/Users/brentonmanks/Documents/GitHub/majorproject-5-wed-1630-4/FrontEnd/node_modules/validator/lib/isMACAddress.js"],"names":["Object","defineProperty","exports","value","isMACAddress","_assertString","_interopRequireDefault","require","obj","__esModule","macAddress","macAddressNoColons","macAddressWithHyphen","macAddressWithSpaces","macAddressWithDots","str","options","no_colons","test","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,WAAP,GAAkBE,YAAlB;;AAEA,IAAIC,aAAa,GAAGC,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAA1C;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAASA;AAAX,GAArC;AAAwD;;AAE/F,IAAIE,UAAU,GAAG,wDAAjB;AACA,IAAIC,kBAAkB,GAAG,qBAAzB;AACA,IAAIC,oBAAoB,GAAG,wDAA3B;AACA,IAAIC,oBAAoB,GAAG,yDAA3B;AACA,IAAIC,kBAAkB,GAAG,sDAAzB;;AAEA,SAASV,YAAT,CAAsBW,GAAtB,EAA2BC,OAA3B,EAAoC;AAClC,GAAC,GAAGX,aAAa,WAAjB,EAA2BU,GAA3B;;AAEA,MAAIC,OAAO,IAAIA,OAAO,CAACC,SAAvB,EAAkC;AAChC,WAAON,kBAAkB,CAACO,IAAnB,CAAwBH,GAAxB,CAAP;AACD;;AAED,SAAOL,UAAU,CAACQ,IAAX,CAAgBH,GAAhB,KAAwBH,oBAAoB,CAACM,IAArB,CAA0BH,GAA1B,CAAxB,IAA0DF,oBAAoB,CAACK,IAArB,CAA0BH,GAA1B,CAA1D,IAA4FD,kBAAkB,CAACI,IAAnB,CAAwBH,GAAxB,CAAnG;AACD;;AAEDI,MAAM,CAACjB,OAAP,GAAiBA,OAAO,WAAxB;AACAiB,MAAM,CAACjB,OAAP,cAAyBA,OAAO,WAAhC","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMACAddress;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar macAddress = /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/;\nvar macAddressNoColons = /^([0-9a-fA-F]){12}$/;\nvar macAddressWithHyphen = /^([0-9a-fA-F][0-9a-fA-F]-){5}([0-9a-fA-F][0-9a-fA-F])$/;\nvar macAddressWithSpaces = /^([0-9a-fA-F][0-9a-fA-F]\\s){5}([0-9a-fA-F][0-9a-fA-F])$/;\nvar macAddressWithDots = /^([0-9a-fA-F]{4}).([0-9a-fA-F]{4}).([0-9a-fA-F]{4})$/;\n\nfunction isMACAddress(str, options) {\n  (0, _assertString.default)(str);\n\n  if (options && options.no_colons) {\n    return macAddressNoColons.test(str);\n  }\n\n  return macAddress.test(str) || macAddressWithHyphen.test(str) || macAddressWithSpaces.test(str) || macAddressWithDots.test(str);\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}